plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group = 'com.example'
version = '1.2-SNAPSHOT'

repositories {
    mavenCentral()
    // Añade el repositorio de Google si no está ya incluido
    maven { url "https://maven.google.com/" }
    // También podrías necesitar el repositorio de snapshots de Google
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    implementation("net.dv8tion:JDA:5.2.3") {
        // Optionally disable audio natives to reduce jar size
    }
    implementation 'org.xerial:sqlite-jdbc:3.48.0.0'
    // Añadir el driver MySQL
    implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.26.3'

    // Dependencia para Google Cloud Vertex AI (Gemini)
    implementation 'com.google.cloud:google-cloud-vertexai:0.5.0'
    
    // Añadir Gson para procesamiento de JSON
    implementation 'com.google.code.gson:gson:2.10.1'

    // Spring Boot para API REST
    implementation 'org.springframework.boot:spring-boot-starter-web:3.4.5'
    implementation 'org.springframework.boot:spring-boot-starter:3.4.5'
    // Para inyección de dependencias y utilidades de Spring
    implementation 'org.springframework:spring-context:6.1.6'

    // Dependencias para JavaFX WebView
    implementation 'org.openjfx:javafx-controls:21.0.2'
    implementation 'org.openjfx:javafx-fxml:21.0.2'
    implementation 'org.openjfx:javafx-web:21.0.2'
}

javafx {
    version = "21.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

java {
    modularity.inferModulePath = true
}

application {
    mainClass = 'bot.gui.LoginApp'
    mainClassName = 'bot.BotApplication'
    run {
        if (project.hasProperty('spring')) {
            main = 'bot.BotApplication'
        }
        else if (project.hasProperty('webTest')) {
            main = 'bot.gui.WebPreviewApp'
        } else {
            main = 'bot.gui.LoginApp'
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

// Sincroniza la versión de build.gradle con config.properties
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

task syncVersionToConfig {
    doLast {
        def configFile = file('src/main/resources/config.properties')
        def versionLine = "bot.version=${project.version}"
        def lines = []
        if (configFile.exists()) {
            lines = configFile.readLines()
            def found = false
            lines = lines.collect { line ->
                if (line.startsWith('bot.version=')) {
                    found = true
                    return versionLine
                } else {
                    return line
                }
            }
            if (!found) {
                lines = [versionLine] + lines
            }
        } else {
            lines = [versionLine]
        }
        configFile.text = lines.join(System.lineSeparator())
    }
}

// Ejecutar la tarea antes de compilar
compileJava.dependsOn syncVersionToConfig