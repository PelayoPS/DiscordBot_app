plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.4.5'
    id 'org.beryx.runtime' version '1.13.0'
}

group = 'com.discordbot'
version = '1.0.0'

repositories {
    mavenCentral()
    maven { url "https://maven.google.com/" }
}

dependencies {
    // Discord JDA
    implementation("net.dv8tion:JDA:5.2.3")
    
    // Base de datos
    implementation 'mysql:mysql-connector-java:8.0.32'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    
    // Google Cloud Vertex AI (Gemini)
    implementation 'com.google.cloud:google-cloud-vertexai:0.5.0'
    
    // JSON
    implementation 'com.google.code.gson:gson:2.10.1'

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web:3.4.5'
    implementation 'org.springframework.boot:spring-boot-starter:3.4.5'
    implementation 'org.springframework:spring-context:6.1.6'
}

java {
    modularity.inferModulePath = true
}

application {
    mainClass = 'com.discordbot.BackendGUI'
    applicationName = 'discord-manager-backend'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

// Configurar el JAR para incluir todas las dependencias
bootJar {
    enabled = true
    archiveClassifier = ''
    archiveBaseName = 'discord-manager-backend'
}

jar {
    enabled = true
    archiveClassifier = 'original'
    archiveBaseName = 'discord-manager-backend'
}

// Sincroniza la versiÃ³n de build.gradle con config.properties
task syncVersionToConfig {
    doLast {
        def configFile = file('src/main/resources/config.properties')
        def versionLine = "bot.version=${project.version}"
        def lines = []
        if (configFile.exists()) {
            lines = configFile.readLines()
            def found = false
            lines = lines.collect { line ->
                if (line.startsWith('bot.version=')) {
                    found = true
                    return versionLine
                } else {
                    return line
                }
            }
            if (!found) {
                lines = [versionLine] + lines
            }
        } else {
            lines = [versionLine]
        }
        configFile.text = lines.join(System.lineSeparator())
    }
}

compileJava.dependsOn syncVersionToConfig

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = [
        'java.base',
        'java.desktop',
        'java.sql',
        'java.naming',
        'java.management',
        'java.security.jgss',
        'java.xml',
        'java.instrument',
        'java.logging',
        'java.net.http',
        'java.rmi',
        'java.scripting',
        'java.transaction.xa',
        'java.compiler',
        'jdk.unsupported',
        'jdk.zipfs'
    ]
    launcher {
        noConsole = true
    }
    jpackage {
        // Opciones de jpackage
        installerType = 'msi'
        installerOptions = [
            '--win-dir-chooser',
            '--win-menu',
            '--win-shortcut',
            '--win-per-user-install',
            '--win-menu-group', 'Discord Bot'
        ]
    }
}