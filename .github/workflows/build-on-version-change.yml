name: Build Apps on Version Change

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'build.gradle'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'build.gradle'

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Job para detectar cambios de versi√≥n
  detect-version-change:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check-version.outputs.changed }}
      new-version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Verificar cambios en versi√≥n
        id: check-version
        run: |
          # Comparar la versi√≥n entre el commit actual y el anterior
          if git diff HEAD^ HEAD -- build.gradle | grep -q "^[+-].*version.*="; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Se detect√≥ cambio en la versi√≥n de build.gradle"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ùå No se detectaron cambios en la versi√≥n"
          fi

      - name: Extraer nueva versi√≥n
        id: extract-version
        if: steps.check-version.outputs.changed == 'true'
        run: |
          VERSION=$(grep "^version = " build.gradle | sed "s/version = '\(.*\)'/\1/")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Nueva versi√≥n detectada: $VERSION"

  # Job para build del backend (Java/Spring Boot)
  build-backend:
    needs: detect-version-change
    if: needs.detect-version-change.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Validar wrapper de Gradle
        uses: gradle/wrapper-validation-action@v1

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Permisos de ejecuci√≥n para gradlew
        run: chmod +x gradlew

      - name: Ejecutar tests
        run: ./gradlew test

      - name: Build JAR del backend
        run: ./gradlew bootJar

      - name: Build instalador MSI (Windows)
        run: ./gradlew runtime

      - name: Subir artefactos del backend
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts-v${{ needs.detect-version-change.outputs.new-version }}
          path: |
            build/libs/*.jar
            build/jpackage/*.msi
          retention-days: 30

  # Job para build de Electron (Desktop)
  build-electron:
    needs: detect-version-change
    if: needs.detect-version-change.outputs.version-changed == 'true'
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/main/desktop/package-lock.json

      - name: Instalar dependencias de Electron
        working-directory: src/main/desktop
        run: npm ci

      - name: Build aplicaci√≥n Electron (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: src/main/desktop
        run: npm run build:win

      - name: Build aplicaci√≥n Electron (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: src/main/desktop
        run: npm run build:mac

      - name: Build aplicaci√≥n Electron (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: src/main/desktop
        run: npm run build:linux

      - name: Subir artefactos de Electron
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.os }}-v${{ needs.detect-version-change.outputs.new-version }}
          path: |
            src/main/desktop/dist/
          retention-days: 30

  # Job para build de Android
  build-android:
    needs: detect-version-change
    if: needs.detect-version-change.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Java para Android
        uses: actions/setup-java@v4
        with:
          java-version: '11' # Android requiere Java 11
          distribution: 'temurin'

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/main/android/package-lock.json

      - name: Configurar Android SDK
        uses: android-actions/setup-android@v3

      - name: Instalar Android Build Tools
        run: |
          yes | sdkmanager "build-tools;33.0.0"
          yes | sdkmanager "platforms;android-33"

      - name: Cache Gradle Android
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            src/main/android/android/.gradle
          key: ${{ runner.os }}-android-gradle-${{ hashFiles('src/main/android/android/**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-android-gradle-

      - name: Instalar dependencias de Capacitor
        working-directory: src/main/android
        run: npm ci

      - name: Sincronizar archivos est√°ticos
        working-directory: src/main/android
        run: npm run copy

      - name: Sincronizar Capacitor
        working-directory: src/main/android
        run: npm run sync 

      - name: Permisos para gradlew de Android
        working-directory: src/main/android/android
        run: chmod +x gradlew

      - name: Build APK Debug
        working-directory: src/main/android/android
        run: ./gradlew assembleDebug

      - name: Build APK Release (sin firmar)
        working-directory: src/main/android/android
        run: ./gradlew assembleRelease

      - name: Subir artefactos de Android
        uses: actions/upload-artifact@v4
        with:
          name: android-apks-v${{ needs.detect-version-change.outputs.new-version }}
          path: |
            src/main/android/android/app/build/outputs/apk/debug/*.apk
            src/main/android/android/app/build/outputs/apk/release/*.apk
          retention-days: 30

  # Job para crear un release autom√°tico
  create-release:
    needs: [detect-version-change, build-backend, build-electron, build-android]
    if: |
      always() && 
      needs.detect-version-change.outputs.version-changed == 'true' &&
      needs.build-backend.result == 'success' &&
      needs.build-electron.result == 'success' &&
      needs.build-android.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Descargar todos los artefactos
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Crear Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.detect-version-change.outputs.new-version }}
          name: Discord Bot Manager v${{ needs.detect-version-change.outputs.new-version }}
          body: |
            ## üöÄ Discord Bot Manager v${{ needs.detect-version-change.outputs.new-version }}
            
            ### üì¶ Archivos incluidos:
            - **Backend (Java)**: JAR ejecutable y instalador MSI
            - **Desktop (Electron)**: Instaladores para Windows, macOS y Linux
            - **Android**: APKs debug y release
            
            ### üìã Cambios:
            - Actualizaci√≥n autom√°tica de versi√≥n a ${{ needs.detect-version-change.outputs.new-version }}
            - Builds autom√°ticos de todas las plataformas
            
            ### üì± Instalaci√≥n:
            1. **Windows**: Descargar el MSI o el ejecutable de Electron
            2. **macOS**: Descargar el DMG de Electron
            3. **Linux**: Descargar el AppImage de Electron
            4. **Android**: Instalar el APK (habilitar fuentes desconocidas)
            
            ---
            *Build autom√°tico generado por GitHub Actions*
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job de notificaci√≥n
  notify-completion:
    needs: [detect-version-change, build-backend, build-electron, build-android, create-release]
    if: always() && needs.detect-version-change.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notificar resultado
        run: |
          if [[ "${{ needs.build-backend.result }}" == "success" && 
                "${{ needs.build-electron.result }}" == "success" && 
                "${{ needs.build-android.result }}" == "success" ]]; then
            echo "‚úÖ ¬°Build exitoso! Todas las aplicaciones fueron construidas correctamente."
            echo "üì¶ Versi√≥n: ${{ needs.detect-version-change.outputs.new-version }}"
            echo "üéâ Release creado autom√°ticamente"
          else
            echo "‚ùå Algunos builds fallaron:"
            echo "   Backend: ${{ needs.build-backend.result }}"
            echo "   Electron: ${{ needs.build-electron.result }}"
            echo "   Android: ${{ needs.build-android.result }}"
          fi
