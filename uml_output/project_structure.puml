@startuml "DiscordBot - Diagrama de Clases"

' Estilo general
skinparam componentStyle uml2
skinparam packageStyle rectangle
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #343A40
skinparam packageBackgroundColor #F8F9FA
skinparam packageBorderColor #6C757D
skinparam arrowColor #495057
' líneas ortogonales
skinparam linetype ortho

' Paquete principal
package bot {
    class Main {
        -LoggingManager logger
        +main(String[] args): void
    }
}

' Paquete API - Interfaces base
package bot.api {
    interface Command {
        +execute(SlashCommandInteractionEvent): void
        +getSlash(): SlashCommandData
        +getName(): String
    }
    
    interface EventHandler {
        +handleEvent(GenericEvent): void
    }
    
    interface Module {
        ' Interfaz para futuros métodos de módulos
    }
}

' Paquete de configuración
package bot.config {
    class ConfigManager {
        -Properties properties
        +loadConfig(): void
        +getProperty(String): String
    }
    
    class BotConfig {
        ' Futura implementación
    }
}

' Paquete core - Componentes principales
package bot.core {
    class Bot {
        -JDA jda
        -ModuleManager moduleManager
        -CommandRegistry commandRegistry
        -EventRegistry eventRegistry
        -LoggingManager logger
        +Bot(String token)
        -initializeDatabase(): void
        -executeSchemaScript(Connection): void
        -loadSchemaScript(): String
        -initializeModules(): void
        +shutdown(): void
        +getJda(): JDA
    }
    
    class CommandRegistry {
        -List<Command> commands
        +registerCommand(Command): void
        +getCommands(): List<Command>
    }
    
    class EventRegistry {
        -List<EventHandler> eventHandlers
        +registerEventListener(EventHandler): void
    }
    
    class JDABuilder {
        +createJDA(String token): JDA
    }
}

' Paquete de gestión de comandos
package bot.commands {
    class ModuleManager {
        -Map<String, Module> modules
        +registerModule(String, Module): void
        +getModules(): Map<String, Module>
    }
}

' Paquetes de comandos específicos
package bot.commands.admin {
    class CreateRole implements Command
    class DeleteRole implements Command
}

package bot.commands.moderation {
    class Ban implements Command
    class Kick implements Command
    class Mute implements Command
    class PurgeCommand implements Command
    class Unban implements Command
}

package bot.commands.user {
    class Avatar implements Command {
        +execute(SlashCommandInteractionEvent): void
        +getSlash(): SlashCommandData
        +getName(): String
        -buildAvatarEmbed(String, String): MessageEmbed
        -buildBannerEmbed(String, String): MessageEmbed
    }

    class AIChat implements Command {
        -static final Logger LOGGER
        -static final String API_URL
        -static final String MODEL_NAME
        -static String apiKey
        -static final Map<String, List<Map<String, Object>>> chatSessions
        -static final HttpClient httpClient
        -static final Gson gson
        +AIChat()
        +execute(SlashCommandInteractionEvent): void
        +getSlash(): SlashCommandData
        +getName(): String
        +static sendMessageToThread(String, String): String
        -static enviarRespuestaFragmentada(ThreadChannel, String): void
        +static getChatSessions(): Map<String, List<Map<String, Object>>>
    }
}

' Paquete de base de datos
package bot.db {
    class DatabaseManager {
        -static DatabaseManager instance
        -String jdbcUrl
        -Properties properties
        +static getInstance(): DatabaseManager
        +getConnection(): Connection
    }
    
    ' Paquete de modelos
    package bot.db.models {
        class Usuario {
            -Long idUsuario
            -String tipoUsuario
            -Experiencia experiencia
            -List<Penalizacion> penalizaciones
            +getExperiencia(): Experiencia
            +addPenalizacion(Penalizacion): void
        }
        
        class Experiencia {
            -Long idExperiencia
            -Long idUsuario
            -int nivel
            -int puntosXp
            -Usuario usuario
            +aumentarExperiencia(int): boolean
            +subirNivel(): void
        }
        
        class Penalizacion {
            -Long idPenalizacion
            -Long idUsuario
            -Long idAdminMod
            -String tipo
            -LocalDateTime fecha
            -String razon
            -Duration duracion
            -Usuario usuario
            -Usuario adminMod
            +isActiva(): boolean
            +revocar(): void
        }
    }
    
    ' Paquete de repositorios
    package bot.db.repositories {
        interface Repository<T, ID> {
            +T save(T entity)
            +Optional<T> findById(ID id)
            +List<T> findAll()
            +void delete(T entity)
            +void deleteById(ID id)
            +boolean existsById(ID id)
        }
        
        interface UsuarioRepository extends Repository {
            +Optional<Usuario> findByTipoUsuario(String tipo)
        }
        
        interface ExperienciaRepository extends Repository {
            +Optional<Experiencia> findByIdUsuario(Long idUsuario)
            +List<Experiencia> findByNivelGreaterThan(int nivel)
        }
        
        interface PenalizacionRepository extends Repository {
            +List<Penalizacion> findByIdUsuario(Long idUsuario)
            +List<Penalizacion> findByIdAdminMod(Long idAdminMod)
            +List<Penalizacion> findByTipo(String tipo)
            +List<Penalizacion> findByFechaBetween(LocalDateTime inicio, LocalDateTime fin)
        }
        
        ' Implementaciones de repositorios
        package bot.db.repositories.impl {
            abstract class AbstractRepository<T, ID> {
                #DatabaseManager databaseManager
                #{abstract} String getTableName()
                #{abstract} String getIdColumnName()
                #{abstract} T mapResultSetToEntity(ResultSet rs)
                #{abstract} void setStatementParameters(PreparedStatement stmt, T entity)
                +T save(T entity)
                +Optional<T> findById(ID id)
            }
            
            class UsuarioRepositoryImpl extends AbstractRepository implements UsuarioRepository {
                #String getTableName()
                #String getIdColumnName()
                #Usuario mapResultSetToEntity(ResultSet rs)
                #void setStatementParameters(PreparedStatement stmt, Usuario usuario)
            }
            
            class ExperienciaRepositoryImpl extends AbstractRepository implements ExperienciaRepository {
                #String getTableName()
                #String getIdColumnName()
                #Experiencia mapResultSetToEntity(ResultSet rs)
                #void setStatementParameters(PreparedStatement stmt, Experiencia experiencia)
            }
            
            class PenalizacionRepositoryImpl extends AbstractRepository implements PenalizacionRepository {
                #String getTableName()
                #String getIdColumnName()
                #Penalizacion mapResultSetToEntity(ResultSet rs)
                #void setStatementParameters(PreparedStatement stmt, Penalizacion penalizacion)
            }
        }
    }
    
    ' Paquete de servicios
    package bot.db.services {
        interface Service<T, ID> {
            +T save(T entity)
            +Optional<T> findById(ID id)
            +List<T> findAll()
            +void delete(T entity)
            +void deleteById(ID id)
            +boolean existsById(ID id)
        }
        
        interface UsuarioService extends Service {
            +findByIdUsuario(String): Usuario
            +findByTipoUsuario(TipoUsuario): List<Usuario>
            +actualizarExperiencia(String, int): boolean
            +agregarPenalizacion(String, Penalizacion): boolean
        }
        
        interface ExperienciaService extends Service {
            +findByIdUsuario(String): Experiencia
            +findByNivel(int): List<Experiencia>
            +aumentarExperiencia(String, int): boolean
            +subirNivel(String): boolean
        }
        
        interface PenalizacionService extends Service {
            +findByIdUsuario(Long): List<Penalizacion>
            +findByIdAdminMod(Long): List<Penalizacion>
            +findByTipo(String): List<Penalizacion>
            +findByFechaBetween(LocalDateTime, LocalDateTime): List<Penalizacion>
            +tienePenalizacionActiva(Long, String): boolean
            +revocarPenalizacion(Long, Long): void
        }
        
        ' Implementaciones de servicios
        package bot.db.services.impl {
            abstract class AbstractService<T, ID> {
                #Repository<T, ID> repository
                +T save(T entity)
                +Optional<T> findById(ID id)
                +List<T> findAll()
                +void delete(T entity)
                +void deleteById(ID id)
                +boolean existsById(ID id)
            }
            
            class UsuarioServiceImpl extends AbstractService implements UsuarioService {
                -UsuarioRepository usuarioRepository
                +findByIdUsuario(String): Usuario
                +findByTipoUsuario(TipoUsuario): List<Usuario>
                +actualizarExperiencia(String, int): boolean
                +agregarPenalizacion(String, Penalizacion): boolean
            }
            
            class ExperienciaServiceImpl extends AbstractService implements ExperienciaService {
                -ExperienciaRepository experienciaRepository
                +findByIdUsuario(String): Experiencia
                +findByNivel(int): List<Experiencia>
                +aumentarExperiencia(String, int): boolean
                +subirNivel(String): boolean
            }
            
            class PenalizacionServiceImpl extends AbstractService implements PenalizacionService {
                -PenalizacionRepository penalizacionRepository
                +findByIdUsuario(Long): List<Penalizacion>
                +findByIdAdminMod(Long): List<Penalizacion>
                +findByTipo(String): List<Penalizacion>
                +findByFechaBetween(LocalDateTime, LocalDateTime): List<Penalizacion>
                +tienePenalizacionActiva(Long, String): boolean
                +revocarPenalizacion(Long, Long): void
            }
        }
    }
    
    ' Paquete de controladores
    package bot.db.controllers {
        abstract class Controller<T, ID> {
            #Service<T, ID> service
            +T save(T entity)
            +Optional<T> findById(ID id)
            +List<T> findAll()
            +void delete(T entity)
            +void deleteById(ID id)
            +boolean existsById(ID id)
        }
        
        class UsuarioController extends Controller {
            -UsuarioService usuarioService
        }
        
        class ExperienciaController extends Controller {
            -ExperienciaService experienciaService
        }
        
        class PenalizacionController extends Controller {
            -PenalizacionService penalizacionService
            +buscarPorIdUsuario(Long): List<Penalizacion>
            +buscarPorIdAdminMod(Long): List<Penalizacion>
            +buscarPorTipo(String): List<Penalizacion>
            +buscarPorRangoFechas(LocalDateTime, LocalDateTime): List<Penalizacion>
            +verificarPenalizacionActiva(Long, String): boolean
            +revocarPenalizacion(Long, Long): void
        }
    }
}

' Paquete de eventos
package bot.events {
    class EventListener {
        #boolean isCommandEnabled
        +setCommandEnabled(boolean)
        +isCommandEnabled(): boolean
        +onMessageReceived(MessageReceivedEvent)
        +onMessageReactionAdd(MessageReactionAddEvent)
    }
}

package bot.listeners {
    class AIChatThreadListener extends ListenerAdapter {
        -static final Logger LOGGER
        +onMessageReceived(MessageReceivedEvent): void
        -enviarRespuestaFragmentada(ThreadChannel, String): void
    }
}

' Paquete de logging
package bot.log {
    class LoggingManager {
        +logInfo(String): void
        +logError(String, Exception): void
    }
}

' Paquete de módulos
package bot.modules {
    abstract class CommandManager extends EventListener {
        #List<Command> commands
        +getSlash(): List<SlashCommandData>
        +getCommands(): List<Command>
        +addCommand(Command): void
        +{abstract} supportsCommand(Command): boolean
    }
    
    package bot.modules.admin {
        class AdminCommands extends CommandManager {
            +supportsCommand(Command): boolean
        }
    }
    
    package bot.modules.mod {
        class ModCommands extends CommandManager {
            +supportsCommand(Command): boolean
        }
    }
    
    package bot.modules.user {
        class UserCommands extends CommandManager {
            +supportsCommand(Command): boolean
        }
    }
}

' Paquete de utilidades
package bot.utils {
    class Utils {
        +{static} isValidUserId(String): boolean
        +{static} formatPenaltyMessage(String, String): String
        +{static} formatDuration(long): String
    }
}

' Relaciones entre clases principales
Main --> Bot: usa
Main --> ConfigManager: usa
Main --> LoggingManager: usa

Bot *--> ModuleManager: gestiona
Bot *--> CommandRegistry: gestiona
Bot *--> EventRegistry: gestiona
Bot *--> LoggingManager: usa
Bot --> DatabaseManager: inicializa
Bot --> AdminCommands: registra
Bot --> ModCommands: registra
Bot --> UserCommands: registra

' Relaciones en base de datos
DatabaseManager <-- AbstractRepository: usa

' Relaciones entre modelos
Usuario "1" *-- "1" Experiencia: tiene
Usuario "1" *-- "n" Penalizacion: tiene
Penalizacion "n" -- "1" Usuario: aplicada a
Penalizacion "n" -- "1" Usuario: aplicada por

' Relaciones en servicios y repositorios
UsuarioServiceImpl --> UsuarioRepository: usa
ExperienciaServiceImpl --> ExperienciaRepository: usa
PenalizacionServiceImpl --> PenalizacionRepository: usa

' Relaciones en controladores
UsuarioController --> UsuarioService: usa
ExperienciaController --> ExperienciaService: usa
PenalizacionController --> PenalizacionService: usa

' Relaciones de módulos y comandos
ModuleManager o-- Module: gestiona
CommandManager o-- Command: gestiona

AdminCommands o-- CreateRole: contiene
AdminCommands o-- DeleteRole: contiene
ModCommands o-- Ban: contiene
ModCommands o-- Kick: contiene
ModCommands o-- Mute: contiene
ModCommands o-- PurgeCommand: contiene
ModCommands o-- Unban: contiene
UserCommands o-- Avatar: contiene

' Relaciones adicionales
ConfigManager <.. Bot: configura
Utils <.. CommandManager: utiliza
Utils <.. Bot: utiliza

' Relaciones para el sistema de chat con IA
AIChatThreadListener --> AIChat: usa los métodos de
Bot --> AIChatThreadListener: registra
UserCommands o-- AIChat: contiene

@enduml